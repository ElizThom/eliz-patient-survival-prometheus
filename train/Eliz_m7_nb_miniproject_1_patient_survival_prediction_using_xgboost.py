# -*- coding: utf-8 -*-
"""Copy_of_M7_NB_MiniProject_1_Patient_Survival_Prediction_using_XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SCVCZSJGEzQrOtpazZOIyD893wLftkaE

# Advanced Certification Program in AI and MLOps
## A program by IISc and TalentSprint
### Mini-Project: Patient Survival Prediction using XGBoost

## Learning Objectives

At the end of the experiment, you will be able to:

* perform data preprocessing on the Heart failure dataset
* train an XGBoost model to predict survival of patients with heart failure
* save your trained model
* creare Gradio application
* deploy application with AWS

## Dataset Description

[Heart failure clinical records dataset](https://archive.ics.uci.edu/ml/datasets/Heart+failure+clinical+records) contains the medical records of 299 patients who had **heart failure**, collected during their follow-up period, where each patient profile has 13 clinical features given as:

- **age**: age of the patient (years)
- **anaemia**: decrease of red blood cells or hemoglobin (boolean)
- **high_blood_pressure**: if the patient has hypertension (boolean)
- **creatinine_phosphokinase (CPK)**: level of the CPK enzyme in the blood (mcg/L)
- **diabetes**: if the patient has diabetes (boolean)
- **ejection_fraction**: percentage of blood leaving the heart at each contraction (percentage)
- **platelets**: platelets in the blood (kiloplatelets/mL)
- **sex**: woman or man (binary)
- **serum_creatinine**: level of serum creatinine in the blood (mg/dL)
- **serum_sodium**: level of serum sodium in the blood (mEq/L)
- **smoking**: if the patient smokes or not (boolean)
- **time**: follow-up period (days)
- **DEATH_EVENT**: if the patient deceased during the follow-up period (boolean)

## Information

Cardiovascular diseases kill millions of people globally every year, and they mainly exhibit as myocardial infarctions and heart failures. Heart failure occurs when the heart cannot pump enough blood to meet the needs of the body.Available electronic medical records of patients quantify symptoms, body features, and clinical laboratory test values, which can be used to perform biostatistics analysis aimed at highlighting patterns and correlations otherwise undetectable by medical doctors. Machine learning, in particular, can predict patients' survival from their data and can individuate the most important features among those included in their medical records.

### Problem Statement

* Build a XGBoost classifier to predict survival of patients with heart failure
* Deploy the application with AWS ECR and ECS

Please refer to ***The demo session held on 26th Oct - Deployment with AWS ECR and ECS*** to get familiar with how to deploy the application with AWS.

### Install XGBoost library
"""

!pip -qq install xgboost

"""### Import required packages"""

import numpy as np
import pandas as pd
import joblib
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score
from xgboost import XGBClassifier

#@title Download the dataset
!wget -q https://cdn.iisc.talentsprint.com/CDS/Datasets/heart_failure_clinical_records_dataset.csv
!ls | grep '.csv'

"""### Load the dataset"""

# Load dataset
df = pd.read_csv('heart_failure_clinical_records_dataset.csv')
df.head()

# Shape of dataset
df.shape

"""### Check missing values"""

# Check for missing values
df.isna().sum()

"""### Handle Outliers"""

# Checking for outliers
df.boxplot()
plt.xticks(rotation=90)
plt.show()

# Handing outliers
outlier_colms = ['creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']
df1 = df.copy()

def handle_outliers(df, colm):
    '''Change the values of outlier to upper and lower whisker values '''
    q1 = df.describe()[colm].loc["25%"]
    q3 = df.describe()[colm].loc["75%"]
    iqr = q3 - q1
    lower_bound = q1 - (1.5 * iqr)
    upper_bound = q3 + (1.5 * iqr)
    for i in range(len(df)):
        if df.loc[i,colm] > upper_bound:
            df.loc[i,colm]= upper_bound
        if df.loc[i,colm] < lower_bound:
            df.loc[i,colm]= lower_bound
    return df

for colm in outlier_colms:
    df1 = handle_outliers(df1, colm)

# Recheck for outliers
df1.boxplot()
plt.xticks(rotation=90)
plt.show()

"""### Split into training and testing set"""

# Split dataset into training and testing set, considering all features for prediction

X = df1.iloc[:, :-1].values
y = df1['DEATH_EVENT'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, stratify = y, random_state= 123)

X_train[1]

"""### Model Training"""

xgb_clf = XGBClassifier(n_estimators=200, max_depth=4, max_leaves=5, random_state=42)
xgb_clf.fit(X_train, y_train)

"""### Model Performance"""

# Accuracy

train_acc = accuracy_score(y_train, xgb_clf.predict(X_train))
test_acc = accuracy_score(y_test, xgb_clf.predict(X_test))
print("Training accuracy: ", train_acc)
print("Testing accuracy: ", test_acc)

# F1-score

train_f1 = f1_score(y_train, xgb_clf.predict(X_train))
test_f1 = f1_score(y_test, xgb_clf.predict(X_test))
print("Training F1 score: ", train_f1)
print("Testing F1 score: ", test_f1)

"""### Save the trained model"""

# Prepare versioned save file name
save_file_name = "xgboost-model.pkl"

joblib.dump(xgb_clf, save_file_name)

"""## Gradio Implementation"""

!pip -q install gradio

import gradio
import joblib
import numpy as np

# Load your trained model

# YOUR CODE HERE
model = joblib.load("xgboost-model.pkl")

# Function for prediction
yes_no_map = {'Yes':1, 'No':0}
gender_map = {'M':1, 'F':0}


def predict_death_event(age=55, anaemia='Yes', creatinine_phosphokinase=1280.25, diabetes='No',
                      ejection_fraction=38.0, high_blood_pressure='No', platelets=263358.03,
                      serum_creatinine=1.10, serum_sodium=136, sex='M', smoking='No', time=6):

    input = [age, yes_no_map[anaemia], creatinine_phosphokinase, yes_no_map[diabetes],
             ejection_fraction, yes_no_map[high_blood_pressure], platelets,
             serum_creatinine, serum_sodium, gender_map[sex], yes_no_map[smoking], time]

    input_to_model = np.array(input).reshape(1, -1)
    result = model.predict(input_to_model)
    #print(result)

    if result[0]==1:
        return 'No'            # if DEATH_EVENT=1 means survive='No'
    elif result[0]==0:
        return 'Yes'
    else:
        return 'ERROR while doing prediction!'

print(np.array(input))

print(np.array(input).reshape(1, -1))

"""For categorical user input, user [Radio](https://www.gradio.app/docs/radio) button component.

For numerical user input, user [Slider](https://www.gradio.app/docs/slider) component.
"""

# Description summary of the dataset
# YOUR CODE HERE

#Hint: describe()
df.describe()

# Inputs from user
in_age = gradio.Slider(minimum=40, maximum=100, value=55, step=1, label='Age (years)', show_label=True)
in_anaemia = gradio.Radio(["Yes", "No"], type="value", label="Decrease of red blood cells or hemoglobin", show_label=True)
in_creatinine = gradio.Slider(minimum=23.0, maximum=1281, value=1280.25, step=0.25, label='Level of the CPK enzyme in the blood (mcg/L)', show_label=True)
in_diabetes = gradio.Radio(["Yes", "No"], type="value", label="Has diabetes", show_label=True)
in_ejection = gradio.Slider(minimum=14, maximum=100, value=38, step=1, label='Percentage of blood leaving the heart at each contraction (%)', show_label=True)
in_bp = gradio.Radio(["Yes", "No"], type="value", label="Has hypertension/high blood pressure", show_label=True)
in_platelets = gradio.Slider(minimum=76000, maximum=440000, value=263358.03, step=1, label='Platelets in the blood (kiloplatelets/mL)', show_label=True)
in_serum_creatinine = gradio.Slider(minimum=0.5, maximum=2.15, value=1.1, step=.01, label='Level of serum creatinine in the blood (mg/dL)', show_label=True)
in_serum_sodium = gradio.Slider(minimum=125, maximum=148, value=136, step=1, label='Level of serum sodium in the blood (mEq/L)', show_label=True)
in_gender = gradio.Radio(["M", "F"], type="value", label="Gender", show_label=True)
in_smoking = gradio.Radio(["Yes", "No"], type="value", label="Smokes?", show_label=True)
in_time = gradio.Slider(minimum=4, maximum=285, value=6, step=1, label='Follow-up period (days)', show_label=True)

# Output response
out_response = gradio.components.Textbox(type="text", label='Survive')

# Gradio interface to generate UI link
title = "Patient Survival Prediction"
description = "Predict survival of patient with heart failure, given their clinical record"

iface = gradio.Interface(fn = predict_death_event,
                         inputs = [in_age, in_anaemia, in_creatinine, in_diabetes, in_ejection,in_bp, in_platelets, in_serum_creatinine, in_serum_sodium, in_gender, in_smoking, in_time],
                         outputs = [out_response],
                         title = title,
                         description = description,
                         allow_flagging='never')

iface.launch(share = True)  # server_name="0.0.0.0", server_port = 8001   # Ref: https://www.gradio.app/docs/interface

